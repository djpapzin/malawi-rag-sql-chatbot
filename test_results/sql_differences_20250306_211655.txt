
Test 1: Which projects are there in the health sector
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(sector) like '%(health|medical|clinic|hospital)%'; RESULTS: select pd.*, count(*) over() as total_count, sum(budget_amount_amount) over() as total_budget_amount from proj_dashboard pd where lower(sector) like '%(health|medical|clinic|hospital)%' limit 10;

Actual SQL:
select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount as total_budget_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(sector) like '%health%' limit 10;

Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(sector) like '%(health|medical|clinic|hospital)%';",
    "actual": "select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount_amount as total_budget_amount_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(sector) like '%health%' limit 10;"
  },
  "results": true
}
-------------------


Test 2: Show me health
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(sector) like '%(health|medical|clinic|hospital)%'; RESULTS: select pd.*, count(*) over() as total_count, sum(budget_amount_amount) over() as total_budget_amount from proj_dashboard pd where lower(sector) like '%(health|medical|clinic|hospital)%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(sector) like '%(health|medical|clinic|hospital)%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 3: What's happening in health
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(sector) like '%(health|medical|clinic|hospital)%'; RESULTS: select pd.*, count(*) over() as total_count, sum(budget_amount_amount) over() as total_budget_amount from proj_dashboard pd where lower(sector) like '%(health|medical|clinic|hospital)%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(sector) like '%(health|medical|clinic|hospital)%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 4: Show me all projects in Zomba district
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(district) like '%zomba%'; RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where lower(district) like '%zomba%' limit 10;

Actual SQL:
select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount as total_budget_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(district) like '%zomba%' limit 10;

Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(district) like '%zomba%';",
    "actual": "select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount_amount as total_budget_amount_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(district) like '%zomba%' limit 10;"
  },
  "results": true
}
-------------------


Test 5: What's happening in Zomba
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(district) like '%zomba%'; RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where lower(district) like '%zomba%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(district) like '%zomba%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 6: Zomba projects
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(district) like '%zomba%'; RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where lower(district) like '%zomba%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(district) like '%zomba%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 7: Tell me about the Nyandule Classroom Block project
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%nyandule%classroom%block%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:
select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount as total_budget_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(project_name) like '%nyandule classroom block%' limit 10;

Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%nyandule%classroom%block%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": "select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount as total_budget_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(project_name) like '%nyandule classroom block%' limit 10;"
}
-------------------


Test 8: Nyandule Classroom Block details
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%nyandule%classroom%block%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:


Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%nyandule%classroom%block%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": ""
}
-------------------


Test 9: What's happening with Nyandule
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%nyandule%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:


Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%nyandule%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": ""
}
-------------------


Test 10: Hi there
Expected SQL:
nan

Actual SQL:
None

Differences:
"'float' object has no attribute 'startswith'"
-------------------


Test 11: What is the total budget for all projects?
Expected SQL:
select count(*) as total_projects, sum(budget_amount_amount) as total_budget_amount, avg(budget_amount_amount) as avg_budget_amount from proj_dashboard;

Actual SQL:
select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount as total_budget_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(district) like '%is the total budget_amount for all projects%' limit 10;

Differences:
{
  "expected": "select count(*) as total_projects, sum(budget_amount_amount) as total_budget_amount, avg(budget_amount_amount) as avg_budget_amount from proj_dashboard;",
  "actual": "select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount as total_budget_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(district) like '%is the total budget_amount for all projects%' limit 10;"
}
-------------------


Test 12: Total budget
Expected SQL:
select count(*) as total_projects, sum(budget_amount_amount) as total_budget_amount, avg(budget_amount_amount) as avg_budget_amount from proj_dashboard;

Actual SQL:


Differences:
{
  "expected": "select count(*) as total_projects, sum(budget_amount_amount) as total_budget_amount, avg(budget_amount_amount) as avg_budget_amount from proj_dashboard;",
  "actual": ""
}
-------------------


Test 13: How much money in total
Expected SQL:
select count(*) as total_projects, sum(budget_amount_amount) as total_budget_amount, avg(budget_amount_amount) as avg_budget_amount from proj_dashboard;

Actual SQL:


Differences:
{
  "expected": "select count(*) as total_projects, sum(budget_amount_amount) as total_budget_amount, avg(budget_amount_amount) as avg_budget_amount from proj_dashboard;",
  "actual": ""
}
-------------------


Test 14: Tell me about Mzuzu Hospital
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%mzuzu%hospital%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:
select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount as total_budget_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(project_name) like '%mzuzu hospital%' limit 10;

Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%mzuzu%hospital%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": "select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount as total_budget_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(project_name) like '%mzuzu hospital%' limit 10;"
}
-------------------


Test 15: Mzuzu Hospital status
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%mzuzu%hospital%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:


Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%mzuzu%hospital%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": ""
}
-------------------


Test 16: What's up with Mzuzu Hospital
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%mzuzu%hospital%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:


Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%mzuzu%hospital%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": ""
}
-------------------


Test 17: Show me education
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(sector) like '%(education|school|classroom|college|university)%'; RESULTS: select pd.*, count(*) over() as total_count, sum(budget_amount_amount) over() as total_budget_amount from proj_dashboard pd where lower(sector) like '%(education|school|classroom|college|university)%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(sector) like '%(education|school|classroom|college|university)%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 18: Education sector
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(sector) like '%(education|school|classroom|college|university)%'; RESULTS: select pd.*, count(*) over() as total_count, sum(budget_amount_amount) over() as total_budget_amount from proj_dashboard pd where lower(sector) like '%(education|school|classroom|college|university)%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(sector) like '%(education|school|classroom|college|university)%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 19: What's happening in education
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(sector) like '%(education|school|classroom|college|university)%'; RESULTS: select pd.*, count(*) over() as total_count, sum(budget_amount_amount) over() as total_budget_amount from proj_dashboard pd where lower(sector) like '%(education|school|classroom|college|university)%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(sector) like '%(education|school|classroom|college|university)%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 20: Mangochi Water Supply status
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%mangochi%water%supply%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:


Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%mangochi%water%supply%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": ""
}
-------------------


Test 21: Tell me about Mangochi Water
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%mangochi%water%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:
select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount as total_budget_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(project_name) like '%mangochi water%' limit 10;

Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%mangochi%water%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": "select project_name as project_name, project_code as project_code, sector as project_sector, status as status, stage, region, district, traditional_authority, budget_amount as total_budget_amount, total_expenditure as total_expenditure, funding_source as funding_source, start_date as start_date, completion_date as completion_date, last_monitoring_visit as last_monitoring_visit, completion_rate as completion_progress, contractor_name as contractor, signing_date as contract_signing_date, description as description, fiscal_year as fiscal_year from proj_dashboard where lower(project_name) like '%mangochi water%' limit 10;"
}
-------------------


Test 22: Good morning
Expected SQL:
nan

Actual SQL:
None

Differences:
"'float' object has no attribute 'startswith'"
-------------------


Test 23: Lilongwe Market details
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%lilongwe%market%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:


Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%lilongwe%market%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": ""
}
-------------------


Test 24: What is the weather like today?
Expected SQL:
nan

Actual SQL:
None

Differences:
"'float' object has no attribute 'startswith'"
-------------------


Test 25: Show ongoing in Lilongwe
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(district) like '%lilongwe%' and status = 'in progress'; RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where lower(district) like '%lilongwe%' and status = 'in progress' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(district) like '%lilongwe%' and status = 'in progress';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 26: What's happening in Lilongwe
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(district) like '%lilongwe%' and status = 'in progress'; RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where lower(district) like '%lilongwe%' and status = 'in progress' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(district) like '%lilongwe%' and status = 'in progress';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 27: Chiradzulu Bridge info
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%chiradzulu%bridge%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:


Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%chiradzulu%bridge%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": ""
}
-------------------


Test 28: How do I apply for a job?
Expected SQL:
nan

Actual SQL:
None

Differences:
"'float' object has no attribute 'startswith'"
-------------------


Test 29: Water and sanitation
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(sector) like '%(water|sanitation)%'; RESULTS: select pd.*, count(*) over() as total_count, sum(budget_amount_amount) over() as total_budget_amount from proj_dashboard pd where lower(sector) like '%(water|sanitation)%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(sector) like '%(water|sanitation)%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 30: Show me water projects
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(sector) like '%(water|sanitation)%'; RESULTS: select pd.*, count(*) over() as total_count, sum(budget_amount_amount) over() as total_budget_amount from proj_dashboard pd where lower(sector) like '%(water|sanitation)%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(sector) like '%(water|sanitation)%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 31: Kasungu Solar status
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%kasungu%solar%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:


Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%kasungu%solar%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": ""
}
-------------------


Test 32: Hello, how are you?
Expected SQL:
nan

Actual SQL:
None

Differences:
"'float' object has no attribute 'startswith'"
-------------------


Test 33: Which district has most
Expected SQL:
select district, count(*) as project_count, sum(budget_amount_amount) as total_budget_amount from proj_dashboard group by district limit 10;

Actual SQL:


Differences:
{
  "expected": "select district, count(*) as project_count, sum(budget_amount_amount) as total_budget_amount from proj_dashboard group by district limit 10;",
  "actual": ""
}
-------------------


Test 34: District rankings
Expected SQL:
select district, count(*) as project_count, sum(budget_amount_amount) as total_budget_amount from proj_dashboard group by district limit 10;

Actual SQL:


Differences:
{
  "expected": "select district, count(*) as project_count, sum(budget_amount_amount) as total_budget_amount from proj_dashboard group by district limit 10;",
  "actual": ""
}
-------------------


Test 35: Nkhata Bay Port info
Expected SQL:
select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%nkhata%bay%port%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;

Actual SQL:


Differences:
{
  "expected": "select pd.*, pc.completion_rate, string_agg(distinct c.contractor_name, ', ') as contractors, string_agg(distinct i.issue_description, ', ') as issues from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id left join contractors c on pd.project_id = c.project_id left join project_issues i on pd.project_id = i.project_id where lower(pd.project_name) like '%nkhata%bay%port%' group by pd.project_id, pd.project_name, pd.district, pd.sector, pd.status, pd.budget_amount_amount, pc.completion_rate;",
  "actual": ""
}
-------------------


Test 36: Can you order food for me?
Expected SQL:
nan

Actual SQL:
None

Differences:
"'float' object has no attribute 'startswith'"
-------------------


Test 37: Show completed
Expected SQL:
COUNT: select count(*) from proj_dashboard where status = 'completed'; RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where status = 'completed' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where status = 'completed';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 38: What's in Dowa
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(district) like '%dowa%'; RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where lower(district) like '%dowa%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(district) like '%dowa%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 39: Projects above 100m
Expected SQL:
COUNT: select count(*) from proj_dashboard where budget_amount_amount > 100000000; RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where budget_amount_amount > 100000000 limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where budget_amount_amount_amount > 100000000;",
    "actual": ""
  },
  "results": true
}
-------------------


Test 40: Big projects
Expected SQL:
COUNT: select count(*) from proj_dashboard where budget_amount_amount > 100000000; RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where budget_amount_amount > 100000000 limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where budget_amount_amount_amount > 100000000;",
    "actual": ""
  },
  "results": true
}
-------------------


Test 41: Blantyre progress
Expected SQL:
select pd.district, count(*) as total_projects, avg(pc.completion_rate) as avg_completion, count(case when status = 'completed' then 1 end) as completed_projects from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id where lower(district) like '%blantyre%' group by district;

Actual SQL:


Differences:
{
  "expected": "select pd.district, count(*) as total_projects, avg(pc.completion_rate) as avg_completion, count(case when status = 'completed' then 1 end) as completed_projects from proj_dashboard pd left join project_completion pc on pd.project_id = pc.project_id where lower(district) like '%blantyre%' group by district;",
  "actual": ""
}
-------------------


Test 42: Show me roads
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(sector) like '%(road|transport|highway)%'; RESULTS: select pd.*, count(*) over() as total_count, sum(budget_amount_amount) over() as total_budget_amount from proj_dashboard pd where lower(sector) like '%(road|transport|highway)%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(sector) like '%(road|transport|highway)%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 43: 2023 projects
Expected SQL:
COUNT: select count(*) from proj_dashboard where extract(year from start_date) = 2023; RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where extract(year from start_date) = 2023 limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where extract(year from start_date) = 2023;",
    "actual": ""
  },
  "results": true
}
-------------------


Test 44: This year's projects
Expected SQL:
COUNT: select count(*) from proj_dashboard where extract(year from start_date) = extract(year from current_date); RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where extract(year from start_date) = extract(year from current_date) limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where extract(year from start_date) = extract(year from current_date);",
    "actual": ""
  },
  "results": true
}
-------------------


Test 45: Average cost in Zomba
Expected SQL:
select district, count(*) as total_projects, avg(budget_amount_amount) as avg_budget_amount, sum(budget_amount_amount) as total_budget_amount from proj_dashboard where lower(district) like '%zomba%' group by district;

Actual SQL:


Differences:
{
  "expected": "select district, count(*) as total_projects, avg(budget_amount_amount) as avg_budget_amount, sum(budget_amount_amount) as total_budget_amount from proj_dashboard where lower(district) like '%zomba%' group by district;",
  "actual": ""
}
-------------------


Test 46: List contractors
Expected SQL:
select distinct contractor_name, count(distinct project_id) as project_count, string_agg(distinct pd.project_name, ', ') as projects from contractors c join proj_dashboard pd on c.project_id = pd.project_id group by contractor_name

Actual SQL:


Differences:
{
  "expected": "select distinct contractor_name, count(distinct project_id) as project_count, string_agg(distinct pd.project_name, ', ') as projects from contractors c join proj_dashboard pd on c.project_id = pd.project_id group by contractor_name",
  "actual": ""
}
-------------------


Test 47: Who is working on projects
Expected SQL:
select distinct contractor_name, count(distinct project_id) as project_count, string_agg(distinct pd.project_name, ', ') as projects from contractors c join proj_dashboard pd on c.project_id = pd.project_id group by contractor_name

Actual SQL:


Differences:
{
  "expected": "select distinct contractor_name, count(distinct project_id) as project_count, string_agg(distinct pd.project_name, ', ') as projects from contractors c join proj_dashboard pd on c.project_id = pd.project_id group by contractor_name",
  "actual": ""
}
-------------------


Test 48: Show 75% complete
Expected SQL:
COUNT: select count(*) from proj_dashboard pd join project_completion pc on pd.project_id = pc.project_id where pc.completion_rate >= 75; RESULTS: select pd.*, pc.completion_rate, count(*) over() as total_count from proj_dashboard pd join project_completion pc on pd.project_id = pc.project_id where pc.completion_rate >= 75 limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard pd join project_completion pc on pd.project_id = pc.project_id where pc.completion_rate >= 75;",
    "actual": ""
  },
  "results": true
}
-------------------


Test 49: Almost done projects
Expected SQL:
COUNT: select count(*) from proj_dashboard pd join project_completion pc on pd.project_id = pc.project_id where pc.completion_rate >= 75; RESULTS: select pd.*, pc.completion_rate, count(*) over() as total_count from proj_dashboard pd join project_completion pc on pd.project_id = pc.project_id where pc.completion_rate >= 75 limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard pd join project_completion pc on pd.project_id = pc.project_id where pc.completion_rate >= 75;",
    "actual": ""
  },
  "results": true
}
-------------------


Test 50: Biggest infrastructure
Expected SQL:
select pd.*, count(*) over() as total_count from proj_dashboard pd where lower(sector) like '%(infrastructure|road|bridge|building)%' limit 10;

Actual SQL:


Differences:
{
  "expected": "select pd.*, count(*) over() as total_count from proj_dashboard pd where lower(sector) like '%(infrastructure|road|bridge|building)%' limit 10;",
  "actual": ""
}
-------------------


Test 51: TA Mwambo projects
Expected SQL:
COUNT: select count(*) from proj_dashboard where lower(traditional_authority) like '%mwambo%'; RESULTS: select pd.*, count(*) over() as total_count from proj_dashboard pd where lower(traditional_authority) like '%mwambo%' limit 10;

Actual SQL:


Differences:
{
  "count": {
    "expected": "select count(*) from proj_dashboard where lower(traditional_authority) like '%mwambo%';",
    "actual": ""
  },
  "results": true
}
-------------------


Test 52: Which sector costs most
Expected SQL:
select sector, count(*) as project_count, sum(budget_amount_amount) as total_budget_amount, avg(budget_amount_amount) as avg_budget_amount from proj_dashboard group by sector limit 10;

Actual SQL:


Differences:
{
  "expected": "select sector, count(*) as project_count, sum(budget_amount_amount) as total_budget_amount, avg(budget_amount_amount) as avg_budget_amount from proj_dashboard group by sector limit 10;",
  "actual": ""
}
-------------------
